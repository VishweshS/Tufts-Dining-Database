-- TABLE CREATION, NULL CONSTRAINTS, UNIQUE CONSTRAINTS, AND CHECK CONSTRAINTS -- 

-- Creating the employees table, this is the list of all the employees and their personal details--
DROP TABLE IF EXISTS project.employees CASCADE;
CREATE TABLE project.employees (
	employee_id smallint PRIMARY KEY,
	last_name varchar(50) NOT NULL,
	first_name varchar(50) NOT NULL,
	date_birth date NOT NULL,
	gender varchar(12),
	citizenship_country varchar(3) NOT NULL,
	ssn char(9) UNIQUE,
	mailing_address text NOT NULL,
	phone char(10) UNIQUE,
	email varchar(74),
	last_updated timestamptz DEFAULT CURRENT_TIMESTAMP
);

-- Check constraint to check if the age of the employees is above 18 years --
ALTER TABLE project.employees ADD CONSTRAINT ck_age CHECK (date_part('year', age(date_birth)) >= 18);

-- Check constraint to check if either an email or a phone number is provided by the employee --
ALTER TABLE project.employees ADD CONSTRAINT ck_communication CHECK (phone IS NOT NULL OR email IS NOT NULL);

SELECT * FROM project.employees;

-- Creating the schedules table, this is the list of the schedule for each employee --
DROP TABLE IF EXISTS project.schedules CASCADE;
CREATE TABLE project.schedules (
	id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	employee_id smallint NOT NULL,
	slot tstzrange NOT NULL,
	duty varchar(20)
);

-- Exclusion check constraint to check if there is no overlap of the schedule for each employee --
ALTER TABLE project.schedules ADD CONSTRAINT ex_schedules 
            EXCLUDE USING GIST (slot WITH &&, employee_id WITH =);

SELECT * FROM project.schedules;


-- Creating the employees_designations table, this is the list of the designation held by each employee over the years and the current designation --
DROP TABLE IF EXISTS project.employees_designations CASCADE;
CREATE TABLE project.employees_designations (
	id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	employee_id smallint NOT NULL,
	time_period daterange NOT NULL,
	designation varchar(20) NOT NULL
);

-- Exclusion check constraint to check if there is no overlap of different designations for each employee --
ALTER TABLE project.employees_designations ADD CONSTRAINT ex_employees_designations 
            EXCLUDE USING GIST (time_period WITH &&, employee_id WITH =);
			
SELECT * FROM project.employees_designations;


-- Creating the pay_rates table, this is the list of the hourly pay rate (normal & special) for each designation over the years and the current pay rate for each designaiton --
DROP TABLE IF EXISTS project.pay_rates CASCADE;
CREATE TABLE project.pay_rates (
	id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	designation varchar(20) NOT NULL,
	time_period daterange NOT NULL,
	normal_hourly_rate numeric(4,2) NOT NULL,
	special_hourly_rate numeric(4,2) NOT NULL
);

-- Unique constraint for a designation and the time period --
ALTER TABLE project.pay_rates ADD CONSTRAINT uq_designation_period UNIQUE (designation, time_period);

-- Exclusion check constraint to check if there is no overlap of different pay rates for each designation --
ALTER TABLE project.pay_rates ADD CONSTRAINT ex_pay_rates
            EXCLUDE USING GIST (time_period WITH &&, designation WITH =);

SELECT * FROM project.pay_rates;

-- Creating the country_codes table, this is the list of all the countries and their ISO 3 digit alpha country codes -- 
DROP TABLE IF EXISTS project.country_codes CASCADE;
CREATE TABLE project.country_codes (
	country_code char(3) PRIMARY KEY
);

-- Check constraint to check if the country codes are in upper case --
ALTER TABLE project.country_codes ADD CONSTRAINT ck_country_codes CHECK (upper(country_code) = country_code);

SELECT * FROM project.country_codes;

-- Creating the deignations table, this is the list of all the designations that an employee can hold while working at Tufts Dining --
DROP TABLE IF EXISTS project.designations CASCADE;
CREATE TABLE project.designations (
	designation varchar(20) PRIMARY KEY
);

SELECT * FROM project.designations;


-- RELATIONSHIPS CREATIONS --

-- The country code of each employee in the employees table should be present in the country_codes table --
ALTER TABLE project.employees
ADD CONSTRAINT fk_employees_country_codes FOREIGN KEY (citizenship_country)
REFERENCES project.country_codes (country_code)
ON UPDATE CASCADE
ON DELETE RESTRICT;

-- The employee id added in the schedules table should be present in the employees table --
ALTER TABLE project.schedules
ADD CONSTRAINT fk_employees_employee_id FOREIGN KEY (employee_id)
REFERENCES project.employees (employee_id)
ON UPDATE CASCADE
ON DELETE RESTRICT;

-- The employee id added in the employees_designation table should be present in the employees table --
ALTER TABLE project.employees_designations
ADD CONSTRAINT fk_employees_employee_id FOREIGN KEY (employee_id)
REFERENCES project.employees (employee_id)
ON UPDATE CASCADE
ON DELETE RESTRICT;

-- The designation of each employee in the employees_designations table should be present in the designations table -- 
ALTER TABLE project.employees_designations
ADD CONSTRAINT fk_employees_designation FOREIGN KEY (designation)
REFERENCES project.designations (designation)
ON UPDATE CASCADE
ON DELETE RESTRICT;

-- The designations in the pay_rates table should be present in the designations table -- 
ALTER TABLE project.pay_rates
ADD CONSTRAINT fk_employees_designation FOREIGN KEY (designation)
REFERENCES project.designations (designation)
ON UPDATE CASCADE
ON DELETE RESTRICT;


-- INDEXES CREATIONS --

-- Index for the contact information of all the employees. This will help to easily extract the contact
-- information when the managers want to reach them 
DROP INDEX IF EXISTS ix_employees_contact_information;
CREATE INDEX ix_employees_contact_information ON project.employees (last_name, phone, email);

-- Index for the foreign key 'citizenship_country' in the employees table
DROP INDEX IF EXISTS fx_employees_citizenship_country;
CREATE INDEX fx_employees_citizenship_country ON project.employees (citizenship_country);

-- Index for the foreign key 'employee_id' in the employees_designations table
DROP INDEX IF EXISTS fx_employees_designations_employees_id;
CREATE INDEX fx_employees_id ON project.employees_designations (employee_id);

-- Index for the foreign key 'designation' in the employees_designations table
DROP INDEX IF EXISTS fx_employees_designations_designation;
CREATE INDEX fx_employees_designations_designation ON project.employees_designations (designation);

-- Index for the foreign key 'designation' in the pay_rates table
DROP INDEX IF EXISTS fx_pay_rates_designation;
CREATE INDEX fx_pay_rates_designation ON project.pay_rates (designation);

-- Index for the foreign key 'employee_id' in the schedules table
DROP INDEX IF EXISTS fx_schedules_employee_id;
CREATE INDEX fx_schedules_employee_id ON project.schedules (employee_id);

-- Index for the schedules of all the employees. This will help to easily extract who is working on a
-- particular day/week
DROP INDEX IF EXISTS ix_schedules_slot;
CREATE INDEX ix_schedules_slot ON project.schedules (employee_id, slot);